<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[热更新方案]]></title>
    <url>%2F2018%2F06%2F03%2F%E7%83%AD%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[热更新/热修复(调研的可能不全) 热更新 1、 Flutter 由于渲染的基础（gdi）是自己实现的，所以实现跨平台、性能优化、摆脱平台约束方面的裕度更大。从实际体验来看， Flutter 的性能比 RN 要高不少。优点可能是性能，但由于它完全自定义了一套 ui 系统，这也是它的限制。 目前只有dev时进行hot reload。release后是不支持这种特性的。期待热更新功能。 2、 React-native (简称RN)是Facebook于2015年4月开源支持如下移动操作系统：iOS, Android,ubuntu phone os, Blackberry, Windows Phone(UWP), Palm WebOS, Bada 和 Symbian… 。 热更新可使用code-push &nbsp; 中文-搭建分发服务器 code-push。 3、 Cordova 是贡献给Apache后的开源项目，是从PhoneGap中抽出的核心代码，是驱动PhoneGap的核心引擎。你可以把它们的关系想象成类似于Webkit和Google Chrome的关系 。支持如下移动操作系统：iOS, Android,ubuntu phone os, Blackberry, Windows Phone, Palm WebOS, Bada 和 Symbian。 4、 weex 阿里巴巴 incubator-weex 。使用vue.js 支持html 、iOS 、Android。 5、动态库 可以做demo用，真实使用的时候会被苹果禁止。 第三方，有的需要付费(不多介绍了) 1、 Xamarin microsoft 2、 APICloud 是用Web语言去开发iOS和Android应用, 国内产品【柚子（北京）移动技术有限公司】。 3、 Phonegap 【需要翻墙】 原本由Nitobi公司开发，现在由Adobe拥有。 4、 Bizness Apps 【需要翻墙】 目前支持iOS（iPhone、 iPad）及Android平台，收费为每个平台39美元。【Businesses Made Easy】公司拥有。 5、 Intel XDK 前身是AppMobi XDK，是一款帮助开发者使用HTML5开发移动及Web应用的跨平台开发工具，intel公司拥有。 未开放 1、 DynamicCocoa 滴滴 编译阶段入手，通过 clang 把 OC 代码编译成自己定制的 JS 格式，再动态下发去执行，做到原生开发，动态运行，主打动态添加功能，当然顺便把修 bug 也给支持了。准备在2017年初开源，但至今没有消息。 2、TPatch 3、OCScript 4、Hybrid 主流的Android平台包括PhoneGap，AppCan，appMobi，Titanium等， iOS 类似的 WebViewJavascriptBridge 停止更新 1、 ulua C# 2、 WaxPatch 或者 mmin18(个人) 3、 wax 后被Alibaba收购， 使用 Lua, 支持iOS 首先是 wax 已经多年不维护了，导致不支持一些 block/64 位等新特性，此外当时 wax 还有文档不足，测试不足，线程不安全，难以调试等。 热修复 1、 JSPatch bang 陈振焯 访谈:http://www.infoq.com/cn/articles/jspatch-opensource 2、 rollout (需要翻墙)国外一个热补丁服务叫 rollout (http://rollout.io)。 它是一个服务平台，底层也是用 JS 调用和替换 OC 方法去实时修复 bug，不过它不是开源的，只能在这个平台上用，另外它的 JS 写法是比较复杂的，导致它不得不在平台上做一些便捷的功能，把一些常用的操作封装起来，减少使用者写代码。来源文章:https://www.cnblogs.com/bugly/p/5740812.html 3、 xLua 腾讯 平时开发用c#，需要热更新时用lua来更新对应的函数 4、 MonoCross 5、 CodePush 是由微软提供的热更新服务。热更新可以使你绕过AppStore的审核机制，直接修改已经上架的应用。对于国内用户，我们也推荐由本网站提供的 Pushy 热更新服务，相比CodePush来说，提供了全中文的文档和技术支持，服务器部署在国内速度更快，还提供了全自动的差量更新方式，大幅节约更新流量，欢迎朋友们试用和反馈意见 其他资料 slua 【Unity3D and mono 】 作者文章：https://www.jianshu.com/p/481994e8b7df Android java 微信Tinker 阿里 Andfix 腾讯的内部方案KKFix Qzone的超级补丁 大众点评的nuwa 百度金融的rocooFix 饿了么的amigo 美团的robust … 还有很多。我主要搜集iOS的哈 如果你想自己实现轻量级 【 热修复 】 一、支持 OC 热修复 (HotFix) YPLiang19/Mango 接近原生语法 wequick/Small 文档 intMax/InstructionPatch &nbsp;&nbsp; json热修复 DiSiOS/HotFixBug JSPatch轻量提取 &amp; Aspects GitHubXuLiying/LYFix Insfgg99x/HotFix &nbsp;&nbsp; 来自轻量级低风险 iOS Hotfix 方案 ddSoul/HotfixDemo &nbsp;&nbsp; 来自轻量级低风险 iOS Hotfix 方案 XiaojieManager/Hotfix &nbsp;&nbsp; 来自轻量级低风险 iOS Hotfix 方案 BuglyDevTeam/BuglyHotfix-iOS Dokay/DJComponentHotfix 了解 Aspects 1、iOS AOP 面向切面编程【Aspects 】 2、从 Aspects 源码中我学到了什么？ 二、Swift 热修复 RockfordWei/CSwift Koolistov/HotfixKit]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native Develop Tool]]></title>
    <url>%2F2018%2F06%2F03%2FReact-Native-Develop-Tool%2F</url>
    <content type="text"><![CDATA[React Native Develop Tool开发工具提供 自动补全、语法检查, 方便我们开发。1、 VS Code（Visual Studio Code） &nbsp;[ open/free ]12345678GitHub 项目地址：https://github.com/Microsoft/vscode# 插件 React Native Tools：微软官方出的ReactNative插件,非常好用 Reactjs code snippets：react的代码提示，如componentWillMount方法可以通过cwm直接获得 Auto Close Tag：自动闭合标签 Auto Rename Tag：自动重命名标签，配合上面的插件使用，基本上能赶上IntelliJ IDEA系的功能了 Path Intellisense：文件路径提示补全 TabSpacer：代码格式化 2、 Atom + Nuclide + watchman &nbsp; [ open/free ]123456789(1)Atom 是github专门为程序员推出的一个跨平台文本编辑器。 具有简洁和直观的图形用户界面，并有很多有趣的特点： 支持CSS，HTML，JavaScript等网页编程语言。 它支持宏，自动完成分屏功能，集成了文件管理器。(2)`watchman`+ `flow` + `eslint` + `Yarn`(3)Facebook 12月12日宣布，由于开发团队精力有限，后续将停止维护 `Nuclide`、`Atom-IDE` 和其他相关开源库。 项目现有源码将继续保留在 Facebook 开源存档仓库中。 目前这些项目的 GitHub 仓库已被官方归档，处于只读状态。 `Nuclide` 和 `Atom IDE` 的官网也相继挂出了“退休”公告。 3、 WebStorm &nbsp;[ private ]123是 `jetbrains公司`(http://www.jetbrains.com)旗下一款JavaScript 开发工具。目前已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与 `IntelliJ IDEA`(https://www.jetbrains.com/idea/ )同源，继承了IntelliJ IDEA强大的JS部分的功能。 4、 Sublime Text 需要安装插件，才可进行预编译 &nbsp; [ private]123456# sublime插件 ReactJS：支持React开发，代码提示，高亮显示 Emmet：前端开发必备 Terminal：在sublime中打开终端并定位到当前目录 react-native-snippets：react native 的代码片段 JsFormat：格式化js代码 5、 Vim 编辑器 &nbsp;[ open/free ]12345678910# 需要翻墙 为 React-JSX 设置 Vim：https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015 License：开源 支持平台：Mac、Linux# Vim 插件 vim-jsx - 提供 JSX 的语法高亮和缩进。 vim-react-snippets - 一组为 Vim 打造的可与Facebook 的 React 库一起使用的片段。 vim-babel - 一组为 Vim 打造的可与Facebook 的 React 库一起使用的片段 6、 GNU Emacs 编辑器 &nbsp; [ open/free ]12345678 官网：https://www.gnu.org/software/emacs/ 官方文档：https://www.gnu.org/software/emacs/documentation.html 针对 Ract Native 的初始设置：http://www.cyrusinnovation.com/initial-emacs-setup-for-reactreactnative/ GitHub 项目地址：https://github.com/emacs-mirror/emacs# 具有用于下载和安装扩展的包系统。 GNU EMACS 是一个可扩展、可定制、免费、自由的文本编辑器。 web-mode.el - 它是一个自主的 emacs 主模块，用于编辑 Web模板。它与许多语言兼容，包括 JSX（React） 7、 Spacemacs 编辑器 &nbsp;[ open/free ]1234567Spacemacs 是一个社区驱动的 Emacs 发行版 - 最好的编辑器既不是 Emacs 也不是Vim，它是 Emacs 和 Vim 相结合！ React layer - 适用于 React 的 ES6 和 JSX 配置层。 它将自动识别 .jsx 和 .react.js 文件。一个用于 React集成的包层。官网：http://spacemacs.org/Github 项目地址：syl20bnr/spacemacs(https://github.com/syl20bnr/spacemacs)官方文档：http://spacemacs.org/doc/DOCUMENTATION.html 8、 Deco IDE &nbsp;[ open/free ]1234567891011121314Deco 是专为 React Native 打造的 IDE。它是一个用于编写 React Native 应用程序的一体化解决方案， 无需任何环境设置即可下载和使用。Deco 专注于组件重用，并支持用户对 UI 的实时编辑， 从而改进了React Native 开发工作流程。优点： (1)可以直接在编辑器里启动模拟器。 (2)当然最吸引人的是直接拖拽一些组件到界面。 (3)可以自动创建新项目、搜索开源组件并插入到项目中。 (4)还可以实时地可视化地调整用的界面。官网：https://www.decosoftware.com/GitHub 项目地址：decosoftware/deco-ide(https://github.com/decosoftware/deco-ide)官方文档：https://www.decosoftware.com/docs支持平台：Mac（仅适用于iOS） 9、 TextMate 编辑器 &nbsp;[ private ]12345678官网：https://macromates.com/官方文档：http://manual.macromates.com/en/GitHub 项目地址：https://github.com/textmate/textmateLicense：收费支持平台：Mac# 插件 javascript-jsx.tmbundle - 用于JSX（React）的 Textmate Bundle。目前支持语法高亮。 10、 RubyMine &nbsp;[ private ]1234[* jetbrains公司 *](http://www.jetbrains.com) 是一个为Ruby 和Rails开发者准备的 IDE，其带有所有开发者必须的功能， 并将之紧密集成于便捷的开发环境中，号称最智能的Ruby和Rails的IDE， 能够大大增加Ruby和Rails开发者的开发效率 我用的是 ‘VS Code’ 很多人选择 1、vim &nbsp; 2、sublime &nbsp; 3、VS Code &nbsp; (我听到的心声是这样顺序) 框架1、 Exponent 只支持全部RN-js代码开发的框架123是一套开发环境，还带有一个已上架的空应用容器。 这样你可以在没有原生开发平台（Xcode或是Android Studio）的情况下 直接编写React Native应用（当然这样你只能写js部分代码而没法写原生代码）。 2、 ReactXP 123456是微软Skype团队维护的一个`框架`。 ReactXP 的意思是 React Cross Platform。 那如何跨端的呢？在 React 和 React Native 封装一个抽象层，也是一个子集，提供跨平台的 API。 底层 iOS/Android 就是跑RN，Web 就是 React，Windows 10 及以上采用自家的 UWP， https://wapbaike.baidu.com/item/uwp/4236943 适配 React Native，Windows 10 以下其他平台就用 Electron 把 Web 包起来……跨端了。]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac React-Native]]></title>
    <url>%2F2018%2F06%2F02%2FMac-React-Native%2F</url>
    <content type="text"><![CDATA[React-native 安装基础篇 RN官方文档 (0.55): http://facebook.github.io RN 中文翻译 文档 (0.51): https://reactnative.cn 推荐博客 ES6 语法学习(阮一峰) http://es6.ruanyifeng.com 以下基于MacOS 一、安装工具 1、 安装 homebre 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 2、然后 安装 node.js1brew install node 3、 配置node国内镜像123456789101112131415# (1)修改 下载仓库为淘宝镜像npm config set registry https://registry.npm.taobao.org --global#如果要发布自己的镜像需要修改回来#npm config set registry https://registry.npmjs.org/# (2) npm config set disturl https://nodejs.org/dist/ --global#是否配置成功,请使用下面命令npm config get registrynpm config get disturl#查看npm全部配置npm config get 4、Yarn、React Native的命令行工具（react-native-cli）12345678# Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。# React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。npm install -g yarn react-native-cli# 配置` Yarn `国内镜像yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 二、安装、配置 RN 1、下载 RN1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# 第1️⃣种 -&gt; 第一次新项目空文件安装react-native init &lt;项目名&gt;# ------------------------------------# 第2️⃣种 -&gt; 在原生项目基础上安装# (2-1)新建 `RN工程文件夹` 后 `终端`定位到该文件夹(cd ...)，copy 项目 到建立 `/ios` 文件夹 # https://reactnative.cn/docs/0.51/integration-with-existing-apps.html#content# (2-2)在项目根目录下创建一个名为package.json的空文本文件 touch package.json # 或者copy 一个也行，但要看配置# (2-3) `package.json`为空，需要填写将要安装的`react-native`配置信息 vim package.json # 或者 Sublime / Atom / Notepad++ .... 进行填写配置,如下: &#123; "name": "项目名", "version": "0.0.1", //# 字段没有太大意义（除非你要把你的项目发布到npm仓库） "private": true, "scripts": &#123; //# 启动packager服务的命令 "start": "node node_modules/react-native/local-cli/cli.js start", "test": "jest", "flow": "flow; test $? -eq 0 -o $? -eq 2" &#125;, "dependencies": &#123; //# react和react-native的版本取决于你的具体需求,一般来说我们推荐使用最新版本 "react": "16.3.1", "react-native": "^0.55.4", //# 用于reeact-native内部ES6参数类型检查 "prop-types": "^15.6.1", //# 热更新(第三方) "code-push-server": "^0.2.20", "react-native-code-push": "^5.3.4", //# 滚动图(第三方) "react-native-swiper": "^1.5.13", //# 导航栏(第三方) "react-navigation": "^2.0.1" //# 你可以使用npm info react和npm info react-native来查看当前的最新版本 //# 这两个必须是匹配，官方也没能列出匹配的列表，只能通过命令 先尝试执行npm install，然后根据提示 ... "eslint": "^3.17.0", //#是一个JavaScript代码静态检查工具，可以检查JavaScript的语法错误，提示潜在的bug https://segmentfault.com/a/1190000009914940 //# 安装官网的Rule,配置代码的规范 http://eslint.org/docs/rules/ "eslint-plugin-react-native": "^3.2.1", &#125;, "devDependencies": &#123; "babel-cli": "^6.26.0", "babel-jest": "23.0.0", "babel-preset-flow": "^6.23.0", "babel-preset-react-native": "4.0.0", //# 静态的检查类型检查 "flow-bin": "^0.67.1", "jest": "23.0.0", "react-test-renderer": "16.3.1" &#125;, "jest": &#123; "preset": "react-native" &#125; &#125; 2、根据package.json安装相应的 react-native + React 以及第三方1npm init #（这个工作跟cocoapods的podfile文件初始化有点像）-&gt; 根据package.json配置内容，进行安装。 3、添加 yarn (react-native依赖管理工具)1234yarn add react-native# facebook.github.io/react-native/docs/image.html 看官网最新是哪个版本yarn add react@16.3.1 4、工程根目录 使用命令(这个会很慢很慢，取决你的网络)1npm install 5、进入项目目录(我的是 ./ios/) ,如果你已经安装Cocoapods 了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# Podfile 设置 platform :ios, '8.0' target '项目名' do # 你的项目需要库 #-------以下是RN库-------- pod 'React', :path =&gt; '../node_modules/react-native', :subspecs =&gt; [ 'Core', 'CxxBridge', # 如果RN版本 &gt;= 0.45则加入此行 'DevSupport', # 如果RN版本 &gt;= 0.43，则需要加入此行才能开启开发者菜单 'RCTText', 'RCTImage', 'RCTNetwork', 'RCTSettings', 'RCTVibration', 'RCTAnimation', 'RCTActionSheet', 'RCTGeolocation', 'RCTWebSocket', # 这个模块是用于调试功能的 # 在这里继续添加你所需要的RN模块 ] # 如果你的RN版本 &gt;= 0.42.0，则加入下面这行 pod "yoga", :path =&gt; "../node_modules/react-native/ReactCommon/yoga" # 如果RN版本 &gt;= 0.45则加入下面三个第三方编译依赖 pod 'DoubleConversion', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec' pod 'GLog', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/GLog.podspec' pod 'Folly', :podspec =&gt; '../node_modules/react-native/third-party-podspecs/Folly.podspec' #如果用 npm/yarn 添加库，自动会在此处添加 post_install do |installer| installer.pods_project.build_configurations.each do |config| config.build_settings['SYMROOT'] = '$&#123;SRCROOT&#125;/../build' end end end# ------------------------------------------------------------------# 安装 CocoaPodpod install 6、react-native (启动 本地Node服务，方便实时用nodo.js去解析ES6的代码-&gt;main.bundle.js) 在React Native项目根目录下运行1npm start / react-native start 7、index.ios.js 生产可执行的文件(可被RN-server 找到) （作为测试用，真正开发需要 react-native bundle.........）1curl http://localhost:8081/index.ios.bundle -o main.jsbundle 8、重新 启动RN服务问题 凡是遇到 终端命令错误等的问题，记得先 彻底关闭 终端，在去执行，可能就好了。 或者 123456789# 查看`Node.js服务运行进程`命令lsof -i:8081# 查询结果(node的PID)# COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME# node 9753 srxboys 32u IPv6 0xd47... 0t0 TCP *:sproxyadmin (LISTEN)# 关掉进程(PID)kill -9 9753 编译项目 之前，一定要自测1、先 运行React Native(上面的第6步) 2、看看index.js + ...js是否有问题 (上面的 第7步) 3、你的 jsCodeLocation 是以何种方式 写的, 是否执行你的js (1)是 NSBundle 走Xcode的Copy Bundle resources里面找文件 xx.jsbundle (2) [NSURL filexxx] ，就是改 app 目录下里面找文件 xx.jsbundle (3) [NSURL urlWithxx] 很遗憾，这个不支持，可能RN觉得不安全 这个我们可以先下载xx.jsbundle, 然后执行 (2) 步【注意 安全保护处理】 4、针对错误 或者 想要调试的(针对变量等) 可以采用 debugger模式 –&gt; React-Native+iphone/Android + Google Chrome 模拟器 菜单 iPhone-&gt; Command + D、Android-&gt; 百度上有很多教程 以及安卓夜神模拟器 iPhone-&gt; Command + R 、Android-&gt;R+R 真机 摇晃 三、 运行项目错误1、如果有用的文件，一定确保文件在 app 的目录里 2、确保js 文件正确(上面) 3、确保js 调用的RN库，你的项目RN都保函这些库(包括自带、第三方) 4、RN 以及 支持的第三方，Xcode编译通过 WARN eslint-plugin-react-native@3.2.1 requires a peer of eslint@^3.17.0 || ^4.0.0 but none is insta … package.json 文件追加 最后2行代码 12345678910... "dependencies": &#123; "react": "16.3.1", "react-native": "0.55.4", # 后面两行，看好上面`WARN`提示的版本号 "eslint": "^3.17.0", "eslint-plugin-react-native": "^3.2.1" ... &#125;,... React-Native特性 一、RN 提供了四种点击事件 1、TouchableHighlight : 可编写点击的 背景色、透明度,只支持一个子节点 2、TouchableNativeFeedback : 仅限Android平台 3、TouchableWithoutFeedback : 点击没有任何颜色变化,只支持一个链单节点 4、TouchableOpacity : 此组件与TouchableHighlight的区别在于并没有额外的颜色变化，继承了所有TouchableWithoutFeedback的属性,并支持多个子节点 二、React认为一个组件应该具有如下特征： 可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件； 可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景； 可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护； 三、在React Native（React.js）里，组件所持有的数据分为两种： 属性（props）：组件的props是不可变的，它只能从其他的组件（例如父组件）传递过来。 状态（state）：组件的state是可变的，它负责处理与用户的交互。在通过用户点击事件等操作以后，如果使得当前组件的某个state发生了改变，那么当前组件就会触发render()方法刷新自己。 四、组件也有生命周期，大致分为三大阶段： Mounting：已插入真实 DOM Updating：正在被重新渲染 Unmounting：已移出真实 DOM 五、React 中组件的几种通信方式，分别是： 父组件向子组件通信：使用 props 子组件向父组件通信：使用 props 回调 跨级组件间通信：使用 context 对象 非嵌套组件间通信：使用事件订阅]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS用友盟统计干点实事]]></title>
    <url>%2F2017%2F08%2F24%2FiOS%E7%94%A8%E5%8F%8B%E7%9B%9F%E7%BB%9F%E8%AE%A1%E5%B9%B2%E7%82%B9%E5%AE%9E%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[友盟统计 分析下 iOS、android 崩溃率iOS 8 - 24 错误总数 621次 活跃数11685 概率 621/11685 = 0.017 百分之2 8 - 23 百分之2 … 用户数：461290 8-24 用户活跃数 15610 8- 23 用户活跃数 14736 …- 2/百 概率 比较高，留存用户也在逐渐下降--目标为 n/千 android 8 - 24 错误总数 517次 百分之1.7 8 - 23 百分之1.8 … 用户数：861412 8-24 用户活跃数 13242 8- 23 用户活跃数 13015- 2/百 概率 比较高，留存用户也在逐渐下降--目标为 n/千 iOS 解决方案：采用热更新 (NSObject + method swizzling + JS/Lua/… )具有针对性的 部分用户进行更新 ，并统计 得出效果。效果好，就全面推广。用户是感觉不到的。 那么问题来了: 1、代码的编写。在哪里比较合适？ 2、是不是所有代码都可以改。包括第三方SDK更新吗？？？？ 3、区分部分热更新统计、在全部热更新。版本号没有变。那么全部热更新后 之前的没有热更新的统计，又怎么区分。 4、热更新安全把控 5、顺利通过苹果审核 6、总是热修复，也不是正确的解决方案，是不是我们代码在编写的健壮、review、测试 等,哪里做的不够、不细。 如果以上，你都不能把控。那你只能用先用用第三方，看看源码。吃透了 你又有新的技术点。 我搜集的热更新方案 ###上面说过的 用Lua脚本热修复的库 https://github.com/probablycorey/wax/ https://github.com/alibaba/wax https://github.com/mmin18/WaxPatch 用JS脚本热修复的库 weex -&gt; https://github.com/apache/incubator-weex react-native https://github.com/facebook/react-native JSPatch -&gt; https://github.com/bang590/JSPatch DynamicCocoa -&gt; https://github.com/DynamicCocoa/DynamicCocoa]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建自己的博客]]></title>
    <url>%2F2017%2F04%2F19%2Fhexo%2F</url>
    <content type="text"><![CDATA[HexoHexo是一个开源的静态博客生成器,用node.js开发。 搭建博客的初衷每当自己(学习、coding)中，总会遇见问题，就Baidu、Google 看别人的讨论或者博客。其实写博客或者发表一个详细的技术点的时候，就是对于自己的沉淀和巩固。这是我所欠缺的，很多东西我都是需要实践来取证自己所知道知识。所以闲暇之余，我要养成写博客的习惯。(其实我是怕 说的技术点不够准确，或者有误区 希望大家来指正) [TOC] 一、准本工作：1、检查是否安装了Node.js 1234$ node -v#如果有版本号，说明你已经安装过了 (例如我的:`v6.10.2`)#Node更新等等操作，我想你会的。 2、安装软件 安装软件:(我个人在家用的是Win10) github.desktop： 安装这个会自动安装Git Shell这样我们就不用安装git了 node.js: Hexo是一款基于Node.js的静态博客框架，所以先安装Node.js。 安装Hexo1、新建 Blog 文件夹，我是放到了 D: ,根据个人情况。1D:\softwork\Blog\ 2、用淘宝镜像 安装Hexo12345#进入到相应的盘符和目标文件夹$ npm install -g hexo --registry=https://registry.npm.taobao.org注:我家里的网不好，翻墙后的网速也不可观，如果你的网络好的话，使用下面的:$ npm install hexo-cli -g 3、检测 Hexo 是否安装上123$ hexo#会出现一些命令说明的东西，那么你的Hexo就安装成功了 4、Hexo 初始化1234$ hexo init &lt;folder&gt;#例如:$ hexo init Hexo 5、可以浏览本地服务器生成的静态HTML12345678910$ cd .\Hexo\#安装NPM(NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题)$ npm install# 生成静态页面$ hexo generate 或者 hexo g# 启动本地服务$ hexo serve 或者 hexo s 6、在GitHub上新建一个 new repository(新的存储库) (默认300M 这个应该够用了)注: Owner 一定是自己的账户名，不是organization(组织)名看了好多文章都说Repository name 都是xxx.github.io，这个github.io都是这么写。不这么写会有什么错误。我想说不会，但是我看过有不是以这个结尾的，如果你是新手，还是这么写吧！ 7、进入刚刚新建的 new repository 右边有个 Setting(1)配置 GitHub Pages (用于介绍托管在GitHub的项目)(2)Choose a theme 你部署完服务器，可以马上浏览的页面 GitHub上的工作就做完了，回到本地 8、用Notepad++配置 站点配置文件因为Win10记事本编写的中文生成的静态页不是标准的UTF-8，会导致乱码 ，所以用Notepad++ 编写。 设置 Notepad++ 自动换行功能 和 行宽 下面编写 站点配置文件1234567891011121314151617181920# Site#网站的标题title: srxboys#副标题subtitle: 说点什么好呢？#描述description: 22joke #作者信息author: srxboys#头像，图片位置在相应主题目录下的images#avatar: /images/avatar.pnglanguage: zh-Hansdeploy:#部署环境，基于hexo+githubpage,所以这里使用git。注意：不同版本的hexo，type有可能不同，3.x以后应使用git,具体参看官方文档 type: git#git仓库地址，替换成你的username即可，其他保持不变，后面会提到如何创建git仓库 repository: git@github.com:srxboys/srxboys.github.io.git branch: master repository : 的内容最好不要手动，GitHub有 copy 的SSH地址 最近发现 Atom 编写Mackdown,是比较不错的，还可以边写边看效果。12# 推荐插件Mackdown-preview 9、生成的静态页署到GitHub上1234567$ hexo clean# 生成静态页面$ hexo generate# 部署远程网站$ hexo deploy 10、hexo deploy 部署远程网站 错误12345$ hexo deployERROR Deployer not found:#补救方法：$ npm install hexo-deployer-git --save 其他注意事项:配置信息文件属性：空格 &lt;相应的值&gt; —&gt; 这里要一定注意 冒号后面要有个 空格,避免在 generate 时出错 over ! over ! over !]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
